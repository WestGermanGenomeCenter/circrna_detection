configfile: "config.yaml"
samplesfile = "samples.tsv"
####  trying to load the samplesfile into a list
import pandas as pd

samples_df = pd.read_table(samplesfile).set_index("samples", drop=False)
sample_names = list(samples_df['samples'])

rule _dcc_h_cleanup_annotation:
  input:
    annoted=config['prefix'] + "/dcc_2_out/run_{name}" + "/CircRNACount_annotated.tsv",
    clean_cords=config['prefix'] + "/dcc_2_out/run_{name}" + "/CircCoordinates_clean"

  output:
    config['prefix'] + "/dcc_2_out/run_{name}" + "/processed_run_{name}.tsv"
  params:
    parse_script=config['parse_file'],
    samplename="{name}"
  conda:
    "../envs/dcc_env.yaml"
  shell:
    "perl {params.parse_script} {input.annoted} {input.clean_cords} {output} {params.samplename}"




rule _dcc_g_annotate_cleanfile:
  input:
    config['prefix'] + "/dcc_2_out/run_{name}" + "/CircRNACount_clean"
  output:
    config['prefix'] + "/dcc_2_out/run_{name}" + "/CircRNACount_annotated.tsv"
  params:
    bed_file = config['bed_ref']
  conda:
    "../envs/dcc_env.yaml"
  shell:
    "bedtools window -a {input} -b {params.bed_file} -w 1 >{output}"

rule _dcc_f_cleanup_circfile:
  input:
    fcount=config['prefix'] + "/dcc_2_out/run_{name}" + "/CircRNACount",
    fcords=config['prefix'] + "/dcc_2_out/run_{name}" + "/CircCoordinates"
  output:
    clean_count=config['prefix'] + "/dcc_2_out/run_{name}" + "/CircRNACount_clean",
    clean_cords=config['prefix'] + "/dcc_2_out/run_{name}" + "/CircCoordinates_clean"
  conda:
    "../envs/dcc_env.yaml"
  shell:
    "cat {input.fcount} | sed '1d' >{output.clean_count} && cat {input.fcords} | sed '1d' >{output.clean_cords}"

rule _dcc_e_execute_dcc:
  input:
    both_lanes=config['prefix'] + "/dcc_2_out/run_{name}" + "/{name}_bothlanes.Chimeric.out.junction",
    lane_1=config['prefix'] + "/dcc_2_out/run_{name}" + "/"+"{name}"+ config['lane_ident1'] +".Chimeric.out.junction",
    lane_2=config['prefix'] + "/dcc_2_out/run_{name}" + "/"+"{name}"+ config['lane_ident2'] +".Chimeric.out.junction"
  params:
    refseq_file=config['refseq_file_dcc'],
    fasta_ref=config['fasta_reference'],
    dcc_com=config['dcc_command'],
    processing_dir= config['prefix'] + "/dcc_2_out/run_{name}/"
  threads: 12

  output:
    config['prefix'] + "/dcc_2_out/run_{name}" + "/CircRNACount",
    config['prefix'] + "/dcc_2_out/run_{name}" + "/CircCoordinates"
  conda:
    "../envs/dcc_env.yaml"
  shell:
    "cd {params.processing_dir} && {params.dcc_com} {input.both_lanes} -mt1 {input.lane_1} -mt2 {input.lane_2} -D -fg -an {params.refseq_file} -Pi -M -Nr 2 1 -A {params.fasta_ref} -N -T {threads}"


rule _dcc_d2_align_mate2:
  input:
    lane_2=config['prefix'] + "/" + "{name}" + config["lane_ident2"] + ".fastq",
    genome=config["genome_STAR_hg38"],
    dir_check=config['prefix'] + "/dcc_2_out/run_{name}/chk.tx"
  params:
    processing_dir= config['prefix'] + "/dcc_2_out/run_{name}/",
    lane2_name="{name}"+ config['lane_ident2']+"."
  threads: 12

  output:
    config['prefix'] + "/dcc_2_out/run_{name}" + "/"+"{name}"+ config["lane_ident2"] +".Chimeric.out.junction"
  conda:
    "../envs/dcc_env.yaml"
  shell:
    "cd {params.processing_dir} && STAR --runThreadN {threads} --genomeDir {input.genome} --outSAMtype BAM SortedByCoordinate --readFilesIn {input.lane_2} --outFileNamePrefix {params.lane2_name} --outReadsUnmapped Fastx --outSJfilterOverhangMin 15 15 15 15 --alignSJoverhangMin 15 --alignSJDBoverhangMin 15 --seedSearchStartLmax 30 --outFilterMultimapNmax 20 --outFilterScoreMin 1 --outFilterMatchNmin 1 --outFilterMismatchNmax 2 --chimSegmentMin 15 --chimScoreMin 15 --chimScoreSeparation 10 --chimJunctionOverhangMin 15 --limitBAMsortRAM 512000000000 &>STAR_lane1_map1_logfile.log"



rule _dcc_d1_align_mate1:
  input:
    lane_1=config['prefix'] + "/" + "{name}" + config["lane_ident1"] + ".fastq",
    genome=config["genome_STAR_hg38"],
    dir_check=config['prefix'] + "/dcc_2_out/run_{name}/chk.tx"

  params:
    processing_dir= config['prefix'] + "/dcc_2_out/run_{name}/",
    lane1_name="{name}"+ config['lane_ident1']+"."

  threads: 12


  output:
    config['prefix'] + "/dcc_2_out/run_{name}" + "/"+"{name}"+ config['lane_ident1'] +".Chimeric.out.junction"
  conda:
    "../envs/dcc_env.yaml"
  shell:
    "cd {params.processing_dir} && STAR --runThreadN {threads} --genomeDir {input.genome} --outSAMtype BAM SortedByCoordinate --readFilesIn {input.lane_1} --outFileNamePrefix {params.lane1_name} --outReadsUnmapped Fastx --outSJfilterOverhangMin 15 15 15 15 --alignSJoverhangMin 15 --alignSJDBoverhangMin 15 --seedSearchStartLmax 30 --outFilterMultimapNmax 20 --outFilterScoreMin 1 --outFilterMatchNmin 1 --outFilterMismatchNmax 2 --chimSegmentMin 15 --chimScoreMin 15 --chimScoreSeparation 10 --chimJunctionOverhangMin 15 --limitBAMsortRAM 512000000000 &>STAR_lane1_map1_logfile.log"


rule _dcc_c_align_primary_STAR_DCC:
  input:
    lane_1= config['prefix'] + "/" + "{name}" + config["lane_ident1"] + ".fastq",
    lane_2= config['prefix'] + "/" + "{name}" + config["lane_ident2"] + ".fastq",
    genome= config["genome_STAR_hg38"],
    dir_check= config['prefix'] + "/dcc_2_out/run_{name}/chk.tx"
  params:
    processing_dir= config['prefix'] + "/dcc_2_out/run_{name}/",
    outfile_name="{name}"+"_bothlanes."
  threads: 12

  output:
    config['prefix'] + "/dcc_2_out/run_{name}" + "/{name}_bothlanes.Chimeric.out.junction"

  conda:
    "../envs/dcc_env.yaml"
  shell:
    "cd {params.processing_dir} && STAR --runThreadN {threads} --genomeDir {input.genome} --outSAMtype BAM SortedByCoordinate --readFilesIn {input.lane_1} {input.lane_2} --outFileNamePrefix {params.outfile_name} --outReadsUnmapped Fastx --outSJfilterOverhangMin 15 15 15 15 --alignSJoverhangMin 15 --alignSJDBoverhangMin 15 --outFilterMultimapNmax 20 --outFilterScoreMin 1 --outFilterMatchNmin 1 --outFilterMismatchNmax 2 --chimSegmentMin 15 --chimScoreMin 15 --chimScoreSeparation 10 --chimJunctionOverhangMin 15 --limitBAMsortRAM 512000000000 &>STAR_init_map1_logfile.log"

rule _dcc_b_prepare_files_dcc:
  input:
    lane_1=config['prefix'] + "/{name}" + config["lane_ident1"] + ".fastq",
    lane_2=config['prefix'] + "/{name}" + config["lane_ident2"] + ".fastq",
  params:
    processing_dir= config['prefix'] + "/dcc_2_out/run_{name}/",
  output:
    config['prefix'] + "/dcc_2_out/run_{name}/chk.tx"

  shell:
    "mkdir -p {params} && cd {params} && touch {output}"



rule _dcc_a_unzip_gz:
  input:
    lane_1=config['prefix'] + "/{name}" + config["lane_ident1"] + ".fastq",
    lane_2=config['prefix'] + "/{name}" + config["lane_ident2"] + ".fastq",
        #out_dir=config['prefix'] + "/"
  output:
    lane_1=config['prefix'] + "/{name}" + config["lane_ident1"] + ".fastq.gz",
    lane_2=config['prefix'] + "/{name}" + config["lane_ident2"] + ".fastq.gz",
  shell:
    "gunzip {input} "
# v0.1
