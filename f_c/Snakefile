
configfile: "f_c/find_circ_snake_config.yaml"
samplesfile = "/gpfs/project/daric102/circs_hilbert_scratchgs/repo/circs/samples.tsv"

import pandas as pd

samples_df = pd.read_table(samplesfile).set_index("samples", drop=False)
sample_names = list(samples_df['samples'])




rule _fc_k_reformat_circs:
  input:
    annotated_circs=config['prefix'] + "/f_c2_out/run_{name}/{name}.circ_candidates_auto.bed.annotated"
  params:
    strict=config['strict'],
    perl_script_dir=config['perl_scripts']
  output:
    tsv_out=config['prefix'] + "/f_c2_out/run_{name}" + "/processed_run_{name}.tsv"
  conda:
    "../envs/f_c_env.yaml"
  shell:
    "perl {params.perl_script_dir}/f_c_outreader.pl --i {input} --o {output} -strict {params.strict}"


rule _fc_j_annotate_candidates_fc:
  input:
    filtered_circs=config['prefix'] + "/f_c2_out/run_{name}/{name}.circ_candidates_auto.bed"
  output:
    annotated_circs=config['prefix'] + "/f_c2_out/run_{name}/{name}.circ_candidates_auto.bed.annotated"
  params:
    bed_file=config['annotation_bed']
  conda:
    "../envs/f_c_env.yaml"
  shell:
    "bedtools window -a {input} -b {params.bed_file} -w 1 >{output}"

rule _fc_i_filter_fc:
  input:
    bed_ci=config['prefix'] + "/f_c2_out/run_{name}/{name}.sites.bed"
  params:
    sum_script=config['fc_scripts_dir'] + "/sum.py",
    score_script=config['fc_scripts_dir'] + "/scorethresh.py"
  output:
    filtered_circs= config['prefix'] + "/f_c2_out/run_{name}/{name}.circ_candidates_auto.bed"
  conda:
    "../envs/f_c_env.yaml"
  shell:
    "grep circ {input.bed_ci} | grep -v chrM | python2.7 {params.sum_script} -2,3 | python2.7 {params.score_script} -16 1 | python2.7 {params.score_script} -15 2 | python2.7 {params.score_script} -14 2 | python2.7 {params.score_script} 7 2 | python2.7 {params.score_script} 8,9 35 | python2.7 {params.score_script} -17 100000 >{output} "

rule _fc_h_align_anchors:
  input:
    anchors=config['prefix'] + "/f_c2_out/run_{name}/{name}.auto_anchors.qfa"
  output:
    bed_ci=config['prefix'] + "/f_c2_out/run_{name}/{name}.sites.bed",
    reads_ci=config['prefix'] + "/f_c2_out/run_{name}/{name}.sites.reads",
    log_bt=config['prefix'] + "/f_c2_out/run_{name}/{name}.secondpass.log",
    log_fc=config['prefix'] + "/f_c2_out/run_{name}/{name}.f_c_run_sites.log"
  params:
    fastq_files_dir=config['chrom_fastqs'],
    genome=config['bowtie2_ref'],
    sample_name="{name}",
    fc_main_script=config['fc_scripts_dir'] + "/find_circ.py"
  conda:
    "../envs/f_c_env.yaml"
  shell:
    "bowtie2 --reorder --mm --score-min=C,-15,0 -q -x {params.genome} -U {input} 2> {output.log_bt} | python2.7 {params.fc_main_script} -G {params.fastq_files_dir} -p {params.sample_name} -s {output.log_fc} > {output.bed_ci} 2> {output.reads_ci}"



rule _fc_g_get_anchors:
  input:
    unmapped=config['prefix'] + "/f_c2_out/run_{name}/{name}.unmapped.auto.bam"
  output:
    anchors=config['prefix'] + "/f_c2_out/run_{name}/{name}.auto_anchors.qfa"
  params:
    fc_script=config['fc_scripts_dir'] + "/unmapped2anchors.py"
  conda:
    "../envs/f_c_env.yaml"
  shell:
    "python 2.7 {params.fc_script} {input} >{output}"


rule _fc_f_prepare_remapping:
  input:
    sorted_bam=config['prefix'] + "/f_c2_out/run_{name}/{name}.auto.bam"
  output:
    unmapped=config['prefix'] + "/f_c2_out/run_{name}/{name}.unmapped.auto.bam"
  threads:
    config['threads']
  conda:
    "../envs/f_c_env.yaml"
  shell:
    "samtools view -@ {threads} -hf 4 {input} | samtools view -@ {threads} -Sb - > {output}"


rule _fc_e_sort_bam:
  input:
    bam=config['prefix'] + "/f_c2_out/run_{name}/temp.bam"
  output:
    sorted_bam=config['prefix'] + "/f_c2_out/run_{name}/{name}.auto.bam"
  threads:
    config['threads']
  conda:
    "../envs/f_c_env.yaml"
  shell:
    "samtools sort @ {threads} -O bam -o {output} {input}"

rule _fc_d_create_bam:
  input:
    sam=config['prefix'] + "/f_c2_out/run_{name}/temp.sam"
  output:
    bam=config['prefix'] + "/f_c2_out/run_{name}/temp.bam"
  threads:
    config['threads']
  conda:
    "../envs/f_c_env.yaml"
  shell:
    "samtools view -@ {threads} -hbuS -o {output} {input}"

rule _fc_c_map_primary_bt2:
  input:
    dir_check=config['prefix'] + "/f_c2_out/run_{name}/chk.tx",
    lane_1=config['prefix'] + "/{name}" + config["lane_ident1"] + ".fastq",
    lane_2=config['prefix'] + "/{name}" + config["lane_ident2"] + ".fastq"
  params:
    genome=config['bowtie2_ref'],
    logfile=config['prefix'] + "/f_c2_out/run_{name}/bt2_first_align.log"
  conda:
    "../envs/f_c_env.yaml"
  output:
    sam=config['prefix'] + "/f_c2_out/run_{name}/temp.sam"
  threads:
    config['threads']
  shell:
    "bowtie2 -p {threads} --very-sensitive --mm --score-min=C,-15,0 -x {params.genome} -1 {input.lane_1} -2 {input.lane_2} 2>{params.logfile} >{output.sam}"



rule _fc_b_prepare_files_fc:
  input:
    lane_1=config['prefix'] + "/{name}" + config["lane_ident1"] + ".fastq",
    lane_2=config['prefix'] + "/{name}" + config["lane_ident2"] + ".fastq"
  params:
    processing_dir= config['prefix'] + "/f_c2_out/run_{name}/"
  conda:
    "../envs/f_c_env.yaml"
  output:
    config['prefix'] + "/f_c2_out/run_{name}/chk.tx"

  shell:
    "mkdir -p {params.processing_dir} && cd {params.processing_dir} && touch {output}"



rule _fc_a_unzip_gz:
  input:
    lane_1=config['prefix'] + "/{name}" + config["lane_ident1"] + ".fastq",
    lane_2=config['prefix'] + "/{name}" + config["lane_ident2"] + ".fastq"
    #out_dir=config['prefix'] + "/"
  output:
    lane_1=config['prefix'] + "/{name}" + config["lane_ident1"] + ".fastq.gz",
    lane_2=config['prefix'] + "/{name}" + config["lane_ident2"] + ".fastq.gz"
  shell:
    "gunzip {input} "
